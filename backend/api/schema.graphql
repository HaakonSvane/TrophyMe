schema {
  query: Query
  mutation: Mutation
}

interface Error {
  message: String!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type AlreadyMemberError implements Error {
  message: String!
}

type ApproveTrophyPayload {
  trophy: Trophy
  errors: [ApproveTrophyError!]
  query: Query!
}

type CreateGamePayload {
  game: Game
  errors: [CreateGameError!]
  query: Query!
}

type CreateGroupInvitePayload {
  invite: Invite
  errors: [CreateGroupInviteError!]
  query: Query!
}

type CreateGroupPayload {
  group: Group
  errors: [CreateGroupError!]
  query: Query!
}

type CreateTrophyRequestPayload {
  trophy: Trophy
  errors: [CreateTrophyRequestError!]
  query: Query!
}

type CreateUserProfilePayload {
  userProfile: UserProfile
  query: Query!
}

type Game implements Node {
  id: ID!
  name: String!
  description: String
  additionalInfo: String
  symbol: String!
}

type Group implements Node @authorize(policy: "IsGroupMember", apply: AFTER_RESOLVER) {
  id: ID!
  name: String!
  description: String
  imageId: String
  adminId: String!
  invite: Invite
  decisionModel: RuleType!
  admin: User!
  games: [Game!]!
  createdDate: DateTime!
  trophies: [Trophy!]!
  members: [User!]!
}

type GroupNotFoundError implements Error {
  message: String!
}

type Invite {
  groupId: Int!
  group: Group!
  inviteCode: String!
  expirationDate: DateTime!
}

type InviteExpiredError implements Error {
  message: String!
}

type InviteResetTooSoonError implements Error {
  message: String!
  secondsToWait: Int!
}

type JoinGroupPayload {
  group: Group
  errors: [JoinGroupError!]
  query: Query!
}

type Mutation {
  createUserProfile(input: CreateUserProfileInput!): CreateUserProfilePayload!
  createGame(input: CreateGameInput!): CreateGamePayload!
  createTrophyRequest(input: CreateTrophyRequestInput!): CreateTrophyRequestPayload!
  approveTrophy(input: ApproveTrophyInput!): ApproveTrophyPayload!
  createGroupInvite(input: CreateGroupInviteInput!): CreateGroupInvitePayload!
  joinGroup(input: JoinGroupInput!): JoinGroupPayload!
  createGroup(input: CreateGroupInput!): CreateGroupPayload!
}

type NoAdminError implements Error {
  message: String!
}

type NoApprovalRequiredError implements Error {
  message: String!
}

type NoGameError implements Error {
  message: String!
}

type NoInviteError implements Error {
  message: String!
}

type NoTrophyRequestError implements Error {
  message: String!
}

type NoUserError implements Error {
  message: String!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  me: User!
  userById(id: ID!): User
  gameById(id: ID!): Game
  trophyById(id: ID!): Trophy
  groupById(id: ID!): Group
}

type Trophy implements Node {
  id: ID!
  gameId: Int!
  game: Game!
  receiverId: String!
  receiver: User!
  request: TrophyRequest!
  description: String
  awardedDate: DateTime
  isAwarded: Boolean!
}

type TrophyRequest {
  id: Int!
  trophyId: ID!
  trophy: Trophy!
  approvals: [TrophyRequestApproval!]!
}

type TrophyRequestApproval {
  userId: ID!
  user: User!
  requestId: Int!
  request: TrophyRequest!
  isApproved: Boolean!
}

type User implements Node @authorize {
  id: ID!
  username: String!
  trophies: [Trophy!]!
  userProfile: UserProfile
  groups: [Group!]!
}

type UserProfile {
  userId: String!
  firstName: String!
  middleName: String
  lastName: String!
  imageId: String
}

union ApproveTrophyError = NoUserError | NoTrophyRequestError | NoApprovalRequiredError

union CreateGameError = NoUserError | GroupNotFoundError

union CreateGroupError = NoUserError

union CreateGroupInviteError = InviteResetTooSoonError | NoUserError | GroupNotFoundError | NoAdminError

union CreateTrophyRequestError = NoUserError | NoGameError | GroupNotFoundError

union JoinGroupError = NoInviteError | NoUserError | InviteExpiredError | GroupNotFoundError | AlreadyMemberError

input ApproveTrophyInput {
  trophyId: ID!
}

input CreateGameInput {
  groupId: ID!
  name: String!
  symbol: String!
  description: String
  additionalInfo: String
}

input CreateGroupInput {
  name: String!
  description: String!
  decisionModel: RuleType
}

input CreateGroupInviteInput {
  groupId: ID!
}

input CreateTrophyRequestInput {
  userId: ID!
  gameId: ID!
  description: String
}

input CreateUserProfileInput {
  firstName: String!
  middleName: String
  lastName: String!
}

input JoinGroupInput {
  inviteCode: String!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum RuleType {
  DEMOCRACY
  DICTATORISHIP
}

directive @allowAnonymous repeatable on FIELD_DEFINITION

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")